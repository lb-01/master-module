name: Prepare Repository

on: create

jobs:
  create-project-board:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: 'Create project board'
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            core.startGroup('Retrieve organisation owner id');
            const organisationOwnerIdQuery = 
            `query OrganisationOwnerId($owner:String!, $name:String!) {
              organization(login:$owner) {
                name,
                repository(name: $name) {
                  id,
                }
              }
            }`;
            const organisationOwnerIdQueryVariables = {
              owner: context.payload.repository.owner.login,
              name: context.payload.repository.name
            };
            if (core.isDebug()) {
              core.debug(`organisationOwnerIdQuery ${organisationOwnerIdQuery}`);
              core.debug(`organisationOwnerIdQueryVariables ${JSON.stringify(organisationOwnerIdQueryVariables, null, 2)}`);
            }
            const organisationOwnerIdQueryResult = await github.graphql(
              organisationOwnerIdQuery, 
              organisationOwnerIdQueryVariables
            )
            core.info(JSON.stringify(organisationOwnerIdQueryResult, null, 2))
            core.endGroup();

            core.startGroup('Create project board');
            const createProjectMutation =
            `mutation CreateProject($ownerId:String!, $name:String!) {
              createProject(input: { 
                name: $name, 
                ownerId: $ownerId, 
                template: AUTOMATED_KANBAN_V2,
                clientMutationId: "e0f64918-44f0-4f84-b634-6dc59732f3f8"
              }) {
                clientMutationId,
                project {
                  name
                }
              }
            }`;
            const createProjectMutationVariables = {
              ownerId: organisationOwnerIdQueryResult.organization.repository.id,
              name: 'Project Board'
            };
            if (core.isDebug()) {
              core.debug(`createProjectMutation ${createProjectMutation}`);
              core.debug(`createProjectMutationVariables ${JSON.stringify(createProjectMutationVariables, null, 2)}`);
            }
            const createResult = await github.graphql(
              createProjectMutation, 
              createProjectMutationVariables
            );
            core.info(JSON.stringify(createResult, null, 2));
            core.endGroup();

  delete-generated-cards:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: create-project-board
    steps:
      - name: 'Delete generated cards'
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            core.startGroup('Query generated cards');
            const generatedCardsQuery = 
            `query FetchGeneratedCardIds($owner:String!, $name:String!, $search:String!) {
              organization(login:$owner) {
                name,
                repository(name: $name) {
                  projects(first: 10, search: $search) {
                    nodes {
                      name,
                      id,
                      columns(first: 1) {
                        nodes {
                          cards {
                            nodes {
                              id
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }`;
            const generatedCardsQueryVariables = {
              owner: context.payload.repository.owner.login,
              name: context.payload.repository.name,
              search: 'board'
            };
            if (core.isDebug()) {
              core.debug(`generatedCardsQuery ${generatedCardsQuery}`);
              core.debug(`generatedCardsQueryVariables ${JSON.stringify(generatedCardsQueryVariables, null, 2)}`);
            }
            const generatedCardsQueryResult = await github.graphql(
              generatedCardsQuery, 
              generatedCardsQueryVariables
            )
            core.info(JSON.stringify(generatedCardsQueryResult, null, 2));

            const projectNodes = generatedCardsQueryResult.organization.repository.projects.nodes[0];
            const projectId = projectNodes.id;
            const cardIds = projectNodes.columns.nodes[0].cards.nodes;
            cardIds.forEach(async (obj) => {
              const mutation =
              `mutation DeleteCard($id: String!) {
                deleteProjectCard(input: {
                  cardId:$id
                }) {
                  deletedCardId
                }
              }`;
              const parameters = {
                id: obj.id
              }
              const result = await github.graphql(
                mutation, 
                parameters
              );
              core.startGroup(`Delete generated card with id ${obj.id}`);
              core.info(JSON.stringify(obj, null, 2));
              core.endGroup();
            });
            core.endGroup();

  create-issues:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: delete-generated-cards
    steps:
      - name: 'Create issues'
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            core.startGroup('Fetch repository & project board id');
            const IdQuery = 
            `query FetchIds($owner:String!, $name:String!, $search:String!) {
              organization(login:$owner) {
                repository(name: $name) {
                  id,
                  projects(first: 10, search: $search) {
                    nodes {
                      id
                    }
                  }
                }
              }
            }`;
            const IdQueryVariables = {
              owner: context.payload.repository.owner.login,
              name: context.payload.repository.name,
              search: 'board'
            };
            if (core.isDebug()) {
              core.debug(`IdQuery ${IdQuery}`);
              core.debug(`IdQueryVariables ${JSON.stringify(IdQueryVariables, null, 2)}`);
            }
            const IdResult = await github.graphql(
              IdQuery, 
              IdQueryVariables
            );
            core.info(JSON.stringify(IdResult, null, 2));
            const repositoryId = IdResult.organization.repository.id;
            const projectId = IdResult.organization.repository.projects.nodes[0].id;
            core.endGroup();

            core.startGroup('Create milestone');
            const createMilestoneResult = await github.issues.createMilestone({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Exercises'
            });
            core.info(JSON.stringify(createMilestoneResult, null, 2));
            const milestoneId = createMilestoneResult.data.node_id;
            core.endGroup();

            const assigneeId = context.payload.sender.node_id
            const issues = [
              {
                title: '1: Modify package.json and install locally',
                body: `
                1. Create feature branch
                2. Change name of project in package.json
                3. Install dependencies
                4. Test application
                5. Create pull request
                `
              },
              {
                title: '2: Create ci pipeline',
                body: `
                1. Create feature branch
                2. Create ci pipeline action and push it to GitHub
                3. Create pull request
                4. Add lint check and push it to same pull request
                5. Add test coverage and push it to same pull request
                6. Add caching
                5. Merge pull request
                `
              },
              {
                title: '3: Add prettier lint to ci',
                body: `See 2: Create ci pipeline`
              },
              {
                title: '4: Add coverage report',
                body: `See 2: Create ci pipeline`
              },
              {
                title: '5: Add caching',
                body: `See 2: Create ci pipeline`
              },
              {
                title: '6: Make release on push master',
                body: `
                1. Create GitHub secret
                  1. Create personal access token
                  2. Create GitHub secret
                2. Create release workflow
                  1. Move issue on project board
                  2. Create local branch
                  3. Set package version
                  4. Commit version change
                  5. Create Release workflow file
                  6. Commit and push the branch to GitHub
                  7. Create pull request
                  8. Clean up your local repository
                `
              },
              {
                title: '7:Publish to GitHub Packages on publish release',
                body: `
                1. Create publish workflow
                  1. Move issue on project board
                  2. Create local branch
                  3. Create Release workflow file
                  4. Commit and push the branch to GitHub
                  5. Create pull request
                  6. Clean up your local repository
                `
              }
            ];

            issues.forEach(async (issue) => {
              const createIssuesMutation = 
              `mutation CreateIssue($repositoryId: String!, $title: String!, $body: String!, $assigneeId: String!, $milestoneId: String!, $projectId: String!) {
                createIssue(input: {
                  repositoryId: $repositoryId,
                  title: $title,
                  body: $body,
                  assigneeIds: [$assigneeId],
                  milestoneId: $milestoneId,
                  projectIds: [$projectId]
                }) {
                  issue {
                    id
                  }
                }
              }`;
              const createIssuesMutationVariables = {
                repositoryId: repositoryId,
                assigneeId: assigneeId,
                projectId: projectId,
                title: issue.title,
                body: issue.body,
                milestoneId: milestoneId
              };
              if (core.isDebug()) {
                core.debug(`IdQuery ${createIssuesMutation}`);
                core.debug(`IdQueryVariables ${JSON.stringify(createIssuesMutationVariables, null, 2)}`);
              }
              const createIssuesResult = await github.graphql(
                createIssuesMutation, 
                createIssuesMutationVariables
              );
              core.startGroup(`Create Issue ${issue.title}`);
              core.info(JSON.stringify(createIssuesResult, null, 2));            
              core.endGroup();
            });
